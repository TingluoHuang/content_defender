name: Testing content_defender

on: push
jobs:

    running-tests:
        name: 🏃 tests  with TYPO3 "${{ matrix.typo3-versions }}" and PHP ${{ matrix.php-versions }}
        #runs-on: self-hosted
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                php-versions: ['7.3']
                typo3-versions: ['^9.5']
                exclude:
                    -   php-versions: '7.1'
                        typo3-versions: '^9.5'
                    -   php-versions: '7.0'
                        typo3-versions: '^9.5'
        services:
            mysql:
                image: mysql:5.7
                env:
                    MYSQL_ALLOW_EMPTY_PASSWORD: false
                    MYSQL_DATABASE: typo3
                    MYSQL_ROOT_PASSWORD: password
                ports:
                    - 3306
        steps:
            -   name: Checkout
                uses: actions/checkout@v2

            -   name: Setup PHP
                uses: shivammathur/setup-php@v1
                with:
                    php-version: ${{ matrix.php-versions }}
                    extensions: fileinfo, filter, gd, hash, intl, json, mbstring, mysqli, openssl, pcre, session, SPL, xml, zip, zlib
                    coverage: none
                env:
                    test: ${{ hashFiles('**/composer.json') }}

            -   name: Get composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -   name: Cache composer dependencies
                uses: actions/cache@v1
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-composer-${{ hashFiles('composer.json') }}
                    restore-keys: ${{ runner.os }}-composer-

            -   name: Install Composer dependencies
                run: |
                    composer require nimut/typo3-complete:"${{ matrix.typo3-versions }}" --no-progress --no-suggest --prefer-dist
                    git checkout composer.json

            -   name: Prepare tests
                run: |
                    sudo apt-get update -q
                    sudo apt-get install --no-install-recommends -y xvfb parallel
                    mkdir -p .Build/public/typo3conf/ext/
                    if [ ! -L .Build/public/typo3conf/ext/content_defender ]; then ln -snvf ../../../../. .Build/public/typo3conf/ext/content_defender; fi
                    echo "::set-env name=TYPO3_PATH_ROOT::$GITHUB_WORKSPACE/.Build/public"
                env:
                    test: ${{ hashFiles('composer.json') }}
                    
            -   name: Running unit tests
                run: |
                    if [ -d "Tests/Unit" ]; then
                        .Build/bin/phpunit --bootstrap .Build/vendor/nimut/testing-framework/res/Configuration/UnitTestsBootstrap.php --testsuite unit;
                    fi
                env:
                    test: ${{ hashFiles('composer.json') }}
                    
                
            -   name: Running functional tests
                run: |
                    if [ -d "Tests/Functional" ]; then
                        find 'Tests/Functional' -wholename '*Test.php' | parallel --gnu 'echo; echo "Running functional test suite {}"; .Build/bin/phpunit --bootstrap .Build/vendor/nimut/testing-framework/res/Configuration/FunctionalTestsBootstrap.php {}';
                    fi
                env:
                    typo3DatabaseHost: 127.0.0.1
                    typo3DatabaseName: typo3
                    typo3DatabaseUsername: root
                    typo3DatabasePassword: password
                    typo3DatabasePort: ${{ job.services.mysql.ports['3306'] }}
                    test: ${{ hashFiles('composer.json') }}
            
            - uses: actions/github-script@0.3.0
              with:
                  github-token: ${{secrets.GITHUB_TOKEN}}
                  script: |
                    var fs = require('fs')
                    var path = require("path")
                    var _FindItem = (function () {
                        function _FindItem(path, level) {
                            this.path = path;
                            this.level = level;
                        }
                        return _FindItem;
                    }());

                    // normalize the path, otherwise the first result is inconsistently formatted from the rest of the results
                    // because path.join() performs normalization.
                    let findPath = "${{github.workspace}}";
                    // debug trace the parameters
                    console.log(`findPath: '${findPath}'`);
                    // return empty if not exists
                    try {
                        fs.lstatSync(findPath);
                    }
                    catch (err) {
                        if (err.code == 'ENOENT') {
                            console.log('0 results');
                            return [];
                        }
                        throw err;
                    }
                    try {
                        var result = [];
                        // push the first item
                        var stack = [new _FindItem(findPath, 1)];
                        var traversalChain = []; // used to detect cycles
                        var _loop_1 = function () {
                            // pop the next item and push to the result array
                            var item = stack.pop();
                            result.push(item.path);
                            // stat the item.  the stat info is used further below to determine whether to traverse deeper
                            //
                            // stat returns info about the target of a symlink (or symlink chain),
                            // lstat returns info about a symlink itself
                            var stats_2 = void 0;
                            // use stat (following all symlinks)
                            stats_2 = fs.statSync(item.path);

                            // note, isDirectory() returns false for the lstat of a symlink
                            if (stats_2.isDirectory()) {
                                console.log("  " + item.path + " (directory)");

                                // get the realpath
                                var realPath_1 = fs.realpathSync(item.path);
                                // fixup the traversal chain to match the item level
                                while (traversalChain.length >= item.level) {
                                    traversalChain.pop();
                                }
                                // test for a cycle
                                if (traversalChain.some(function (x) { return x == realPath_1; })) {
                                    console.log('    cycle detected:' + realPath_1);
                                    return "continue";
                                }
                                // update the traversal chain
                                traversalChain.push(realPath_1);

                                // push the child items in reverse onto the stack
                                var childLevel_1 = item.level + 1;
                                var childItems = fs.readdirSync(item.path)
                                    .map(function (childName) { return new _FindItem(path.join(item.path, childName), childLevel_1); });
                                stack.push.apply(stack, childItems.reverse());
                            }
                            else {
                                console.log("  " + item.path + " (file)");
                            }
                        };
                        while (stack.length) {
                            var state_1 = _loop_1();
                            if (state_1 === "continue") continue;
                        }
                        console.log(result.length + " results");
                        return result;
                    }
                    catch (err) {
                        throw new Error(err.message);
                    }
            - run: |
                find . -name "composer.json" -print
              env:
                  test: ${{ hashFiles('composer.json') }}
#            - uses: mxschmitt/action-tmate@v1
