name: Testing content_defender

on: push
jobs:

    running-tests:
        name: 🏃 tests  with TYPO3 "${{ matrix.typo3-versions }}" and PHP ${{ matrix.php-versions }}
        runs-on: ubuntu-18.04
        strategy:
            fail-fast: false
            matrix:
                php-versions: ['7.3']
                typo3-versions: ['^9.5']
                exclude:
                    -   php-versions: '7.1'
                        typo3-versions: '^9.5'
                    -   php-versions: '7.0'
                        typo3-versions: '^9.5'
        services:
            mysql:
                image: mysql:5.7
                env:
                    MYSQL_ALLOW_EMPTY_PASSWORD: false
                    MYSQL_DATABASE: typo3
                    MYSQL_ROOT_PASSWORD: password
                ports:
                    - 3306
        steps:
            -   name: Checkout
                uses: actions/checkout@v2

            -   name: Setup PHP
                uses: shivammathur/setup-php@v1
                with:
                    php-version: ${{ matrix.php-versions }}
                    extensions: fileinfo, filter, gd, hash, intl, json, mbstring, mysqli, openssl, pcre, session, SPL, xml, zip, zlib
                    coverage: none
                env:
                    test: ${{ hashFiles('**/composer.json') }}

            -   name: Get composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -   name: Cache composer dependencies
                uses: actions/cache@v1
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
                    restore-keys: ${{ runner.os }}-composer-

            -   name: Install Composer dependencies
                run: |
                    composer require nimut/typo3-complete:"${{ matrix.typo3-versions }}" --no-progress --no-suggest --prefer-dist
                    git checkout composer.json

            -   name: Prepare tests
                run: |
                    sudo apt-get update -q
                    sudo apt-get install --no-install-recommends -y xvfb parallel
                    mkdir -p .Build/public/typo3conf/ext/
                    if [ ! -L .Build/public/typo3conf/ext/content_defender ]; then ln -snvf ../../../../. .Build/public/typo3conf/ext/content_defender; fi
                    echo "::set-env name=TYPO3_PATH_ROOT::$GITHUB_WORKSPACE/.Build/public"
                env:
                    test: ${{ hashFiles('**/composer.json') }}
                    
            -   name: Running unit tests
                run: |
                    if [ -d "Tests/Unit" ]; then
                        .Build/bin/phpunit --bootstrap .Build/vendor/nimut/testing-framework/res/Configuration/UnitTestsBootstrap.php --testsuite unit;
                    fi
                env:
                    test: ${{ hashFiles('**/composer.json') }}
                    
                
            -   name: Running functional tests
                run: |
                    if [ -d "Tests/Functional" ]; then
                        find 'Tests/Functional' -wholename '*Test.php' | parallel --gnu 'echo; echo "Running functional test suite {}"; .Build/bin/phpunit --bootstrap .Build/vendor/nimut/testing-framework/res/Configuration/FunctionalTestsBootstrap.php {}';
                    fi
                env:
                    typo3DatabaseHost: 127.0.0.1
                    typo3DatabaseName: typo3
                    typo3DatabaseUsername: root
                    typo3DatabasePassword: password
                    typo3DatabasePort: ${{ job.services.mysql.ports['3306'] }}
                    test: ${{ hashFiles('**/composer.json') }}
            
            - uses: actions/github-script@0.3.0
              with:
                  script: |
                        let fs = require('fs')
                        
                        class _FindItem {
                            public path: string;
                            public level: number;

                            public constructor(path: string, level: number) {
                                this.path = path;
                                this.level = level;
                            }
                        }
                        // normalize the path, otherwise the first result is inconsistently formatted from the rest of the results
                        // because path.join() performs normalization.
                        let findPath = "${{github.workspace}}";

                        // debug trace the parameters
                        console.log(`findPath: '${findPath}'`);

                        // return empty if not exists
                        try {
                            fs.lstatSync(findPath);
                        }
                        catch (err) {
                            if (err.code == 'ENOENT') {
                                console.log('0 results')
                                return;
                            }

                            throw err;
                        }

                        try {
                            let result: string[] = [];

                            // push the first item
                            let stack: _FindItem[] = [new _FindItem(findPath, 1)];
                            let traversalChain: string[] = []; // used to detect cycles

                            while (stack.length) {
                                // pop the next item and push to the result array
                                let item = stack.pop()!; // non-null because `stack.length` was truthy
                                result.push(item.path);

                                // stat the item.  the stat info is used further below to determine whether to traverse deeper
                                //
                                // stat returns info about the target of a symlink (or symlink chain),
                                // lstat returns info about a symlink itself
                                let stats: fs.Stats;
                                try {
                                    // use stat (following all symlinks)
                                    stats = fs.statSync(item.path);
                                }
                                catch (err) {
                                    if (err.code == 'ENOENT' && options.allowBrokenSymbolicLinks) {
                                        // fallback to lstat (broken symlinks allowed)
                                        stats = fs.lstatSync(item.path);
                                        console.log(`  ${item.path} (broken symlink)`);
                                    }
                                    else {
                                        throw err;
                                    }
                                }

                                // note, isDirectory() returns false for the lstat of a symlink
                                if (stats.isDirectory()) {
                                    console.log(`  ${item.path} (directory)`);

                                    // get the realpath
                                    let realPath: string = fs.realpathSync(item.path);

                                    // fixup the traversal chain to match the item level
                                    while (traversalChain.length >= item.level) {
                                        traversalChain.pop();
                                    }

                                    // test for a cycle
                                    if (traversalChain.some((x: string) => x == realPath)) {
                                        console.log('    cycle detected');
                                        continue;
                                    }

                                    // update the traversal chain
                                    traversalChain.push(realPath);

                                    // push the child items in reverse onto the stack
                                    let childLevel: number = item.level + 1;
                                    let childItems: _FindItem[] =
                                        fs.readdirSync(item.path)
                                            .map((childName: string) => new _FindItem(path.join(item.path, childName), childLevel));
                                    for (var i = childItems.length - 1; i >= 0; i--) {
                                        stack.push(childItems[i]);
                                    }
                                }
                                else {
                                    console.log(`  ${item.path} (file)`);
                                }
                            }

                            console.log(`${result.length} results`);
                            return;
                        }
                        catch (err) {
                            throw new Error(err.message);
                        }
            - run: |
                find . -name "composer.json" -print
              env:
                  test: ${{ hashFiles('**/composer.json') }}
#            - uses: mxschmitt/action-tmate@v1
